# Create GCBS15 plots with unique variable names
p1_GCBS <- ggplot(df, aes(x = Government_Malfeasance)) +
geom_bar() +
labs(title = "Government Malfeasance Distribution")
p2_GCBS <- ggplot(df, aes(x = Extraterrestrial_Cover_up)) +
geom_bar() +
labs(title = "Extraterrestrial Cover-up Distribution")
p3_GCBS <- ggplot(df, aes(x = Malevolent_Global)) +
geom_bar() +
labs(title = "Malevolent Global Distribution")
p4_GCBS <- ggplot(df, aes(x = Personal_Well_being)) +
geom_bar() +
labs(title = "Personal Well-being Distribution")
p5_GCBS <- ggplot(df, aes(x = Control_of_Information)) +
geom_bar() +
labs(title = "Control of Information Distribution")
# Combine all BFI plots into one visual
grid.arrange(p1_BFI, p2_BFI, p3_BFI, p4_BFI, p5_BFI, ncol = 3)
# Combine all GCBS15 plots into one visual
grid.arrange(p1_GCBS, p2_GCBS, p3_GCBS, p4_GCBS, p5_GCBS, ncol = 3)
# GCBS15
# Calculate GCBS15 trait scores
df$Government_Malfeasance <- (0.75 * df$GCBS15_1 + 0.86 * df$GCBS15_6 + 0.82 * df$GCBS15_11) / 3
df$Extraterrestrial_Cover_up <- (0.75 * df$GCBS15_3 + 0.87 * df$GCBS15_8 + 0.80 * df$GCBS15_13) / 3
df$Malevolent_Global <- (0.77 * df$GCBS15_2 + 0.83 * df$GCBS15_7 + 0.91 * df$GCBS15_12) / 3
df$Personal_Well_being <- (0.74 * df$GCBS15_4 + 0.69 * df$GCBS15_9 + 0.77 * df$GCBS15_14) / 3
df$Control_of_Information <- (0.69 * df$GCBS15_5 + 0.75 * df$GCBS15_10 + 0.70 * df$GCBS15_15) / 3
# Load necessary libraries for visualization
library(ggplot2)
library(gridExtra)
# Create bar charts for each trait with unique variable names
p1_BFI <- ggplot(df, aes(x = BFI_Agreeableness)) +
geom_bar() +
labs(title = "Agreeableness Distribution")
p2_BFI <- ggplot(df, aes(x = BFI_Extraversion)) +
geom_bar() +
labs(title = "Extraversion Distribution")
p3_BFI <- ggplot(df, aes(x = BFI_Conscientiousness)) +
geom_bar() +
labs(title = "Conscientiousness Distribution")
p4_BFI <- ggplot(df, aes(x = BFI_Neuroticism)) +
geom_bar() +
labs(title = "Neuroticism Distribution")
p5_BFI <- ggplot(df, aes(x = BFI_Openness)) +
geom_bar() +
labs(title = "Openness Distribution")
# Create GCBS15 plots with unique variable names
p1_GCBS <- ggplot(df, aes(x = Government_Malfeasance)) +
geom_bar() +
labs(title = "Government Malfeasance Distribution")
p2_GCBS <- ggplot(df, aes(x = Extraterrestrial_Cover_up)) +
geom_bar() +
labs(title = "Extraterrestrial Cover-up Distribution")
p3_GCBS <- ggplot(df, aes(x = Malevolent_Global)) +
geom_bar() +
labs(title = "Malevolent Global Distribution")
p4_GCBS <- ggplot(df, aes(x = Personal_Well_being)) +
geom_bar() +
labs(title = "Personal Well-being Distribution")
p5_GCBS <- ggplot(df, aes(x = Control_of_Information)) +
geom_bar() +
labs(title = "Control of Information Distribution")
# Combine all GCBS15 plots into one visual
grid.arrange(p1_GCBS, p2_GCBS, p3_GCBS, p4_GCBS, p5_GCBS, ncol = 3)
# Calculate the overall GCBS score using weighted scores
df$GCBS_Overall <- (
(0.75 * df$GCBS15_1) +
(0.86 * df$GCBS15_6) +
(0.82 * df$GCBS15_11) +  # Government Malfeasance
(0.75 * df$GCBS15_3) +
(0.87 * df$GCBS15_8) +
(0.80 * df$GCBS15_13) +  # Extraterrestrial Cover-up
(0.77 * df$GCBS15_2) +
(0.83 * df$GCBS15_7) +
(0.91 * df$GCBS15_12) +  # Malevolent Global
(0.74 * df$GCBS15_4) +
(0.69 * df$GCBS15_9) +
(0.77 * df$GCBS15_14) +  # Personal Well-being
(0.69 * df$GCBS15_5) +
(0.75 * df$GCBS15_10) +
(0.70 * df$GCBS15_15)    # Control of Information
) / (0.75 + 0.86 + 0.82 + 0.75 + 0.87 + 0.80 +
0.77 + 0.83 + 0.91 + 0.74 + 0.69 + 0.77 +
0.69 + 0.75 + 0.70)  # Total factor loadings
# Check the overall GCBS scores
head(df$GCBS_Overall)
# Calculate the overall GCBS score using weighted scores
df$GCBS_Overall <- (
(0.75 * df$GCBS15_1) +
(0.86 * df$GCBS15_6) +
(0.82 * df$GCBS15_11) +  # Government Malfeasance
(0.75 * df$GCBS15_3) +
(0.87 * df$GCBS15_8) +
(0.80 * df$GCBS15_13) +  # Extraterrestrial Cover-up
(0.77 * df$GCBS15_2) +
(0.83 * df$GCBS15_7) +
(0.91 * df$GCBS15_12) +  # Malevolent Global
(0.74 * df$GCBS15_4) +
(0.69 * df$GCBS15_9) +
(0.77 * df$GCBS15_14) +  # Personal Well-being
(0.69 * df$GCBS15_5) +
(0.75 * df$GCBS15_10) +
(0.70 * df$GCBS15_15)    # Control of Information
) / (0.75 + 0.86 + 0.82 + 0.75 + 0.87 + 0.80 +
0.77 + 0.83 + 0.91 + 0.74 + 0.69 + 0.77 +
0.69 + 0.75 + 0.70)  # Total factor loadings
# Check the overall GCBS scores
head(df$GCBS_Overall)
library(ggplot2)
# Histogram of Overall GCBS Score
ggplot(df, aes(x = GCBS_Overall)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Distribution of Overall GCBS Scores",
x = "Overall GCBS Score",
y = "Frequency") +
theme_minimal()
library(ggplot2)
# Boxplot of Overall GCBS Score
ggplot(df, aes(y = GCBS_Overall)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Boxplot of Overall GCBS Scores",
y = "Overall GCBS Score") +
theme_minimal()
# Calculate the overall GCBS score using weighted scores
df$GCBS_Overall <- (
(0.75 * df$GCBS15_1) +
(0.86 * df$GCBS15_6) +
(0.82 * df$GCBS15_11) +  # Government Malfeasance
(0.75 * df$GCBS15_3) +
(0.87 * df$GCBS15_8) +
(0.80 * df$GCBS15_13) +  # Extraterrestrial Cover-up
(0.77 * df$GCBS15_2) +
(0.83 * df$GCBS15_7) +
(0.91 * df$GCBS15_12) +  # Malevolent Global
(0.74 * df$GCBS15_4) +
(0.69 * df$GCBS15_9) +
(0.77 * df$GCBS15_14) +  # Personal Well-being
(0.69 * df$GCBS15_5) +
(0.75 * df$GCBS15_10) +
(0.70 * df$GCBS15_15)    # Control of Information
) / (0.75 + 0.86 + 0.82 + 0.75 + 0.87 + 0.80 +
0.77 + 0.83 + 0.91 + 0.74 + 0.69 + 0.77 +
0.69 + 0.75 + 0.70)  # Total factor loadings
# Check the overall GCBS scores
head(df$GCBS_Overall)
library(ggplot2)
# Histogram of Overall GCBS Score
ggplot(df, aes(x = GCBS_Overall)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Distribution of Overall GCBS Scores",
y = "Overall GCBS Score",
x = "Higher scores correlate with greater conspiracist belief") +
theme_minimal()
library(ggplot2)
# Boxplot of Overall GCBS Score with informative x-axis
ggplot(df, aes(y = GCBS_Overall)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Boxplot of Overall GCBS Scores",
y = "Overall GCBS Score",
x = "Higher scores correlate with greater conspiracist belief") +
theme_minimal() +
theme(axis.title.x = element_text(size = 10, face = "italic"))
#ANES
# Create new columns for ideology labels based on the response scheme
df$ANES_Ideology <- factor(df$ANES_1,
levels = 0:7,
labels = c("Extremely Liberal", "Liberal", "Slightly Liberal", "Moderate, Middle of Road",
"Don't Know, Haven't Thought", "Slightly Conservative", "Conservative", "Extremely Conservative"))
df$ANES_Party <- factor(df$ANES_2,
levels = 0:3,
labels = c("Democratic Party", "Republican Party", "Independent", "Other"))
# Visualize the ideology scores
library(ggplot2)
library(gridExtra)
# Histogram for Ideology Label 1
histogram_plot1 <- ggplot(df, aes(x = ANES_Ideology)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Liberal-Conservative Self-Identification", x = "Ideology", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Histogram for Ideology Label 2 (Political party registration)
histogram_plot2 <- ggplot(df, aes(x = ANES_Party)) +
geom_bar(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Political Party Registration", x = "Party Registration", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine all plots using grid.arrange
grid.arrange(histogram_plot1, histogram_plot2, ncol = 2)
#ANES
# Create new columns for ideology labels based on the response scheme
df$ANES_Ideology <- factor(df$ANES_1,
levels = 0:7,
labels = c("Extremely Liberal", "Liberal", "Slightly Liberal", "Moderate, Middle of Road",
"Don't Know, Haven't Thought", "Slightly Conservative", "Conservative", "Extremely Conservative"))
df$ANES_Party <- factor(df$ANES_2,
levels = 0:3,
labels = c("Democratic Party", "Republican Party", "Independent", "Other"))
# Visualize the ideology scores
library(ggplot2)
library(gridExtra)
# Histogram for Ideology Label 1
histogram_plot1 <- ggplot(df, aes(x = ANES_Ideology)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Political Ideology", x = "Ideology", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Histogram for Ideology Label 2 (Political party registration)
histogram_plot2 <- ggplot(df, aes(x = ANES_Party)) +
geom_bar(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Political Party", x = "Party Registration", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine all plots using grid.arrange
grid.arrange(histogram_plot1, histogram_plot2, ncol = 2)
#VSA
# Reverse scoring for relevant questions
df$VSA_Q1_reverse <- 8 - df$VSA_Q1  # Reverse scoring for Q1
#VSA
# Reverse scoring for relevant questions
df$VSA_1_reverse <- 8 - df$VSA_1  # Reverse scoring for Q1
df$VSA_4_reverse <- 8 - df$VSA_4  # Reverse scoring for Q4
df$VSA_5_reverse <- 8 - df$VSA_5  # Reverse scoring for Q5
# Calculate scores for each trait using EFA factor loadings
df$VSA_Conservatism <- (df$VSA_1_reverse * 0.42 + df$VSA_2 * 0.67) / (0.42 + 0.67)
df$VSA_Traditionalism <- (df$VSA_3 * 0.68 + df$VSA_4_reverse * 0.60) / (0.68 + 0.60)
df$VSA_Authoritarianism <- (df$VSA_5_reverse * 0.48 + df$VSA_6 * 0.63) / (0.48 + 0.63)
# overall VSA score by averaging the three traits
df$VSA_Overall <- (df$VSA_Conservatism + df$VSA_Traditionalism + df$VSA_Authoritarianism) / 3
# Load necessary library for visualization
library(ggplot2)
library(gridExtra)
# Bar charts for each trait
a1 <- ggplot(df, aes(x = VSA_Conservatism)) +
geom_bar() +
labs(title = "Distribution of Conservatism Scores", x = "Conservatism Score", y = "Count")
a2 <- ggplot(df, aes(x = VSA_Traditionalism)) +
geom_bar() +
labs(title = "Distribution of Traditionalism Scores", x = "Traditionalism Score", y = "Count")
a3 <- ggplot(df, aes(x = VSA_Authoritarianism)) +
geom_bar() +
labs(title = "Distribution of Authoritarianism Scores", x = "Authoritarianism Score", y = "Count")
# Arrange all plots in one grid
grid.arrange(a1, a2, a3, ncol = 1)
# Histogram for overall VSA score
ggplot(df, aes(x = VSA_Overall)) +
geom_histogram(binwidth = 0.5) +
labs(title = "Distribution of Overall VSA Score", x = "Overall VSA Score", y = "Count")
#VSA
# Reverse scoring for relevant questions
df$VSA_1_reverse <- 8 - df$VSA_1  # Reverse scoring for Q1
df$VSA_4_reverse <- 8 - df$VSA_4  # Reverse scoring for Q4
df$VSA_5_reverse <- 8 - df$VSA_5  # Reverse scoring for Q5
# Calculate scores for each trait using EFA factor loadings
df$VSA_Conservatism <- (df$VSA_1_reverse * 0.42 + df$VSA_2 * 0.67) / (0.42 + 0.67)
df$VSA_Traditionalism <- (df$VSA_3 * 0.68 + df$VSA_4_reverse * 0.60) / (0.68 + 0.60)
df$VSA_Authoritarianism <- (df$VSA_5_reverse * 0.48 + df$VSA_6 * 0.63) / (0.48 + 0.63)
# overall VSA score by averaging the three traits
df$VSA_Overall <- (df$VSA_Conservatism + df$VSA_Traditionalism + df$VSA_Authoritarianism) / 3
library(ggplot2)
library(gridExtra)
# Assuming your dataframe is named 'df'
# Histograms for each trait with color
hist_conservatism <- ggplot(df, aes(x = VSA_Conservatism)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Conservatism", x = "Conservatism Score", y = "Count") +
theme_minimal()
hist_traditionalism <- ggplot(df, aes(x = VSA_Traditionalism)) +
geom_histogram(binwidth = 0.1, fill = "salmon", color = "black") +
labs(title = "Distribution of Traditionalism", x = "Traditionalism Score", y = "Count") +
theme_minimal()
hist_authoritarianism <- ggplot(df, aes(x = VSA_Authoritarianism)) +
geom_histogram(binwidth = 0.1, fill = "lightgreen", color = "black") +
labs(title = "Distribution of Authoritarianism", x = "Authoritarianism Score", y = "Count") +
theme_minimal()
# Overall VSA histogram
hist_overall <- ggplot(df, aes(x = VSA_Overall)) +
geom_histogram(binwidth = 0.1, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Overall VSA Score", x = "Overall VSA Score", y = "Count") +
theme_minimal()
# Combine all histograms into one visual
grid.arrange(hist_conservatism, hist_traditionalism, hist_authoritarianism, hist_overall, ncol = 2)
#MOCRI non-bold
# Define true values for the non-bold questions
true_values_nonbold <- c(1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1)  # Adjust based on actual scoring
# Calculate participant scores and false positives/negatives for non-bold section
df$MOCRI_NonBold_Score <- rowMeans(df[, grep("MOCRI_NonManipulative|MOCRI_Manipulative", names(df))])  # Average score
# Calculate False Negatives and False Positives for non-bold
df$False_Negatives_NonBold <- rowSums(df[, grep("MOCRI_1_NonManipulative|MOCRI_2_Manipulative|MOCRI_3_Manipulative|MOCRI_4_NonManipulative|MOCRI_5_NonManipulative|MOCRI_6_Manipulative|MOCRI_7_Manipulative|MOCRI_8_Manipulative|MOCRI_9_NonManipulative|MOCRI_10_Manipulative|MOCRI_11_NonManipulative|MOCRI_12_NonManipulative", names(df))] == 1 & true_values_nonbold == 0)
df$False_Positives_NonBold <- rowSums(df[, grep("MOCRI_1_NonManipulative|MOCRI_2_Manipulative|MOCRI_3_Manipulative|MOCRI_4_NonManipulative|MOCRI_5_NonManipulative|MOCRI_6_Manipulative|MOCRI_7_Manipulative|MOCRI_8_Manipulative|MOCRI_9_NonManipulative|MOCRI_10_Manipulative|MOCRI_11_NonManipulative|MOCRI_12_NonManipulative", names(df))] == 0 & true_values_nonbold == 1)
# Visualize the results for non-bold
library(ggplot2)
library(gridExtra)
# Histogram for non-bold MOCRI scores
hist_mocri_nonbold_scores <- ggplot(df, aes(x = MOCRI_NonBold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Distribution of Non-Bold MOCRI Scores", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (non-bold)
hist_false_negatives_nonbold <- ggplot(df, aes(x = False_Negatives_NonBold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of False Negatives (Non-Bold)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (non-bold)
hist_false_positives_nonbold <- ggplot(df, aes(x = False_Positives_NonBold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "Distribution of False Positives (Non-Bold)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for non-bold
grid.arrange(hist_mocri_nonbold_scores, hist_false_negatives_nonbold, hist_false_positives_nonbold, ncol = 3)
# Check for NAs in the entire dataframe
colSums(is.na(mocri_data))
# Check for NAs in a specific column
sum(is.na(mocri_data$MOCRI_NonBold_Score))
# Check for NAs in a specific column
sum(is.na(mocri_data$MOCRI_NonBold_Score))
# Check for NAs in a specific column
sum(is.na(df$MOCRI_NonBold_Score))
# Define input columns for MOCRI Non-Bold
input_columns <- c("MOCRI_1_NonManipulative", "MOCRI_2_Manipulative", "MOCRI_3_Manipulative",
"MOCRI_4_NonManipulative", "MOCRI_5_NonManipulative", "MOCRI_6_Manipulative",
"MOCRI_7_Manipulative", "MOCRI_8_Manipulative", "MOCRI_9_NonManipulative",
"MOCRI_10_Manipulative", "MOCRI_11_NonManipulative", "MOCRI_12_NonManipulative")
# Ensure all input columns are numeric
df[input_columns] <- lapply(df[input_columns], function(x) as.numeric(as.character(x)))
# Define input columns for MOCRI Non-Bold with the correct naming convention
input_columns <- c("MOCRI_NONBOLD_MOCRI_1_NonManipulative", "MOCRI_NONBOLD_MOCRI_2_Manipulative",
"MOCRI_NONBOLD_MOCRI_3_Manipulative", "MOCRI_NONBOLD_MOCRI_4_NonManipulative",
"MOCRI_NONBOLD_MOCRI_5_NonManipulative", "MOCRI_NONBOLD_MOCRI_6_Manipulative",
"MOCRI_NONBOLD_MOCRI_7_Manipulative", "MOCRI_NONBOLD_MOCRI_8_Manipulative",
"MOCRI_NONBOLD_MOCRI_9_NonManipulative", "MOCRI_NONBOLD_MOCRI_10_Manipulative",
"MOCRI_NONBOLD_MOCRI_11_NonManipulative", "MOCRI_NONBOLD_MOCRI_12_NonManipulative")
# Ensure all input columns are numeric
df[input_columns] <- lapply(df[input_columns], function(x) as.numeric(as.character(x)))
# Check for NAs in the input columns
na_counts <- colSums(is.na(df[input_columns]))
print(na_counts)  # Should return 0 for all columns if there are no NAs
# Calculate the MOCRI Non-Bold Score
df$MOCRI_NonBold_Score <- rowMeans(df[input_columns], na.rm = TRUE)
# Check the result
print(head(df$MOCRI_NonBold_Score))  # Should show the first few values of the score column
# Calculate False Negatives and False Positives
true_values_nonbold <- c(1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1)  # Adjust based on actual scoring
df$False_Negatives_NonBold <- rowSums(df[input_columns] == 1 & true_values_nonbold == 0, na.rm = TRUE)
df$False_Positives_NonBold <- rowSums(df[input_columns] == 0 & true_values_nonbold == 1, na.rm = TRUE)
# Load libraries
library(ggplot2)
library(gridExtra)
# Histogram for non-bold MOCRI scores
hist_mocri_nonbold_scores <- ggplot(df, aes(x = MOCRI_NonBold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "Distribution of Non-Bold MOCRI Scores", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (non-bold)
hist_false_negatives_nonbold <- ggplot(df, aes(x = False_Negatives_NonBold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of False Negatives (Non-Bold)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (non-bold)
hist_false_positives_nonbold <- ggplot(df, aes(x = False_Positives_NonBold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "Distribution of False Positives (Non-Bold)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for non-bold
grid.arrange(hist_mocri_nonbold_scores, hist_false_negatives_nonbold, hist_false_positives_nonbold, ncol = 3)
# Calculate False Negatives and False Positives
true_values_nonbold <- c(1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1)  # Adjust based on actual scoring
df$False_Negatives_NonBold <- rowSums(df[input_columns] == 1 & true_values_nonbold == 0, na.rm = TRUE)
df$False_Positives_NonBold <- rowSums(df[input_columns] == 0 & true_values_nonbold == 1, na.rm = TRUE)
# Load libraries
library(ggplot2)
library(gridExtra)
# Histogram for non-bold MOCRI scores
hist_mocri_nonbold_scores <- ggplot(df, aes(x = MOCRI_NonBold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "MOCRI Non-Bold Scores", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (non-bold)
hist_false_negatives_nonbold <- ggplot(df, aes(x = False_Negatives_NonBold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "False Negatives (Non-Bold)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (non-bold)
hist_false_positives_nonbold <- ggplot(df, aes(x = False_Positives_NonBold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "False Positives (Non-Bold)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for non-bold
grid.arrange(hist_mocri_nonbold_scores, hist_false_negatives_nonbold, hist_false_positives_nonbold, ncol = 3)
#MOCRI BOLD
# Define input columns for MOCRI Bold with the correct naming convention
input_columns_bold <- c("MOCRI_BOLD_MOCRI_BOLD_1_Manipulative", "MOCRI_BOLD_MOCRI_BOLD_2_NonManipulative",
"MOCRI_BOLD_MOCRI_BOLD_3_Manipulative", "MOCRI_BOLD_MOCRI_BOLD_4_NonManipulative",
"MOCRI_BOLD_MOCRI_BOLD_5_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_6_Manipulative",
"MOCRI_BOLD_MOCRI_BOLD_7_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_8_Manipulative",
"MOCRI_BOLD_MOCRI_BOLD_9_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_10_Manipulative",
"MOCRI_BOLD_MOCRI_BOLD_11_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_12_Manipulative")
# Ensure all input columns are numeric
df[input_columns_bold] <- lapply(df[input_columns_bold], function(x) as.numeric(as.character(x)))
# Check for NAs in the input columns
na_counts_bold <- colSums(is.na(df[input_columns_bold]))
print(na_counts_bold)  # Should return 0 for all columns if there are no NAs
# Calculate the MOCRI Bold Score
df$MOCRI_Bold_Score <- rowMeans(df[input_columns_bold], na.rm = TRUE)
# Define true values for bold scoring
true_values_bold <- c(0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1)
# Calculate False Negatives and False Positives for Bold
df$False_Negatives_Bold <- rowSums(df[input_columns_bold] == 1 & true_values_bold == 0, na.rm = TRUE)
df$False_Positives_Bold <- rowSums(df[input_columns_bold] == 0 & true_values_bold == 1, na.rm = TRUE)
# Load libraries for visualization
library(ggplot2)
library(gridExtra)
# Histogram for bold MOCRI scores
hist_mocri_bold_scores <- ggplot(df, aes(x = MOCRI_Bold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "MOCRI Bold Scores", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (bold)
hist_false_negatives_bold <- ggplot(df, aes(x = False_Negatives_Bold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "False Negatives (Bold)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (bold)
hist_false_positives_bold <- ggplot(df, aes(x = False_Positives_Bold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "False Positives (Bold)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for bold
grid.arrange(hist_mocri_bold_scores, hist_false_negatives_bold, hist_false_positives_bold, ncol = 3)
# Calculate False Negatives and False Positives
true_values_nonbold <- c(1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1)  # Adjust based on actual scoring
df$False_Negatives_NonBold <- rowSums(df[input_columns] == 1 & true_values_nonbold == 0, na.rm = TRUE)
df$False_Positives_NonBold <- rowSums(df[input_columns] == 0 & true_values_nonbold == 1, na.rm = TRUE)
# Load libraries
library(ggplot2)
library(gridExtra)
# Histogram for non-bold MOCRI scores
hist_mocri_nonbold_scores <- ggplot(df, aes(x = MOCRI_NonBold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "MOCRI Non-Bold Scores (Post-Intervention)", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (non-bold)
hist_false_negatives_nonbold <- ggplot(df, aes(x = False_Negatives_NonBold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "False Negatives (Post-Intervention)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (non-bold)
hist_false_positives_nonbold <- ggplot(df, aes(x = False_Positives_NonBold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "False Positives (Post-Intervention)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for non-bold
grid.arrange(hist_mocri_nonbold_scores, hist_false_negatives_nonbold, hist_false_positives_nonbold, ncol = 3)
# Calculate False Negatives and False Positives
true_values_nonbold <- c(1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1)  # Adjust based on actual scoring
df$False_Negatives_NonBold <- rowSums(df[input_columns] == 1 & true_values_nonbold == 0, na.rm = TRUE)
df$False_Positives_NonBold <- rowSums(df[input_columns] == 0 & true_values_nonbold == 1, na.rm = TRUE)
# Load libraries
library(ggplot2)
library(gridExtra)
# Histogram for non-bold MOCRI scores
hist_mocri_nonbold_scores <- ggplot(df, aes(x = MOCRI_NonBold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "MOCRI Non-Bold Scores (Post-Intervention)", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (non-bold)
hist_false_negatives_nonbold <- ggplot(df, aes(x = False_Negatives_NonBold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "False Negatives (Post-Intervention)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (non-bold)
hist_false_positives_nonbold <- ggplot(df, aes(x = False_Positives_NonBold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "False Positives (Post-Intervention)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for non-bold
grid.arrange(hist_mocri_nonbold_scores, hist_false_negatives_nonbold, hist_false_positives_nonbold, nrow = 3)
#MOCRI BOLD
# Define input columns for MOCRI Bold with the correct naming convention
input_columns_bold <- c("MOCRI_BOLD_MOCRI_BOLD_1_Manipulative", "MOCRI_BOLD_MOCRI_BOLD_2_NonManipulative",
"MOCRI_BOLD_MOCRI_BOLD_3_Manipulative", "MOCRI_BOLD_MOCRI_BOLD_4_NonManipulative",
"MOCRI_BOLD_MOCRI_BOLD_5_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_6_Manipulative",
"MOCRI_BOLD_MOCRI_BOLD_7_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_8_Manipulative",
"MOCRI_BOLD_MOCRI_BOLD_9_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_10_Manipulative",
"MOCRI_BOLD_MOCRI_BOLD_11_NonManipulative", "MOCRI_BOLD_MOCRI_BOLD_12_Manipulative")
# Ensure all input columns are numeric
df[input_columns_bold] <- lapply(df[input_columns_bold], function(x) as.numeric(as.character(x)))
# Check for NAs in the input columns
na_counts_bold <- colSums(is.na(df[input_columns_bold]))
print(na_counts_bold)  # Should return 0 for all columns if there are no NAs
# Calculate the MOCRI Bold Score
df$MOCRI_Bold_Score <- rowMeans(df[input_columns_bold], na.rm = TRUE)
# Define true values for bold scoring
true_values_bold <- c(0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1)
# Calculate False Negatives and False Positives for Bold
df$False_Negatives_Bold <- rowSums(df[input_columns_bold] == 1 & true_values_bold == 0, na.rm = TRUE)
df$False_Positives_Bold <- rowSums(df[input_columns_bold] == 0 & true_values_bold == 1, na.rm = TRUE)
# Load libraries for visualization
library(ggplot2)
library(gridExtra)
# Histogram for bold MOCRI scores
hist_mocri_bold_scores <- ggplot(df, aes(x = MOCRI_Bold_Score)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
labs(title = "MOCRI Bold Scores (Pre-Intervention)", x = "Score", y = "Count") +
theme_minimal()
# Histogram for false negatives (bold)
hist_false_negatives_bold <- ggplot(df, aes(x = False_Negatives_Bold)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "False Negatives (Pre-Intervention)", x = "False Negatives", y = "Count") +
theme_minimal()
# Histogram for false positives (bold)
hist_false_positives_bold <- ggplot(df, aes(x = False_Positives_Bold)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
labs(title = "False Positives (Pre-Intervention)", x = "False Positives", y = "Count") +
theme_minimal()
# Combine visuals into one plot for bold
grid.arrange(hist_mocri_bold_scores, hist_false_negatives_bold, hist_false_positives_bold, nrow = 3)

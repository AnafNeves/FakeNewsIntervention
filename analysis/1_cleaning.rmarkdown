---
title: "FaceNewsIntervention - Data Cleaning"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: true
    toc: true
---




## Data Preparation



```{r}

#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(modelsummary)
  config_modelsummary(startup_message = FALSE)


```

```{r}
#| code-fold: false

df <- read.csv("../data/rawdata.csv")

dfmist <- read.csv("../data/rawdata_mist.csv")
```



The initial sample consisted of `r report::report_participants(df, age="Age", gender="Gender", education="Education")`, for a total trial number of `r nrow(df)`.


## Questionnaires

### BFI



```{r}
#| code-fold: false

# Count missing values for each BFI10 item
BFI10_missing_values <- sapply(df[, paste0("BFI10_", 1:10)], function(x) sum(is.na(x)))
print(BFI10_missing_values)
```

```{r}
#| code-fold: false

df$BFI_Agreeableness <- (df$BFI10_2 + (6-df$BFI10_7)) / 2
df$BFI_Extraversion <- (df$BFI10_6 + (6-df$BFI10_1)) / 2
df$BFI_Conscientiousness <- (df$BFI10_8 + (6-df$BFI10_3)) / 2
df$BFI_Neuroticism <- (df$BFI10_9 + (6-df$BFI10_4)) / 2
df$BFI_Openness <- (df$BFI10_10 + (6-df$BFI10_5)) / 2
```

```{r}
bfi <- select(df, starts_with("BFI_"))

modelsummary::datasummary_skim(bfi)
```



### GCBS15



```{r}
#| code-fold: false

# Calculate mean and sd for each participant
df$GCBS_mean <- rowMeans(df[, paste0("GCBS15_", 1:15)], na.rm = TRUE)
df$GCBS_sd <- apply(df[, paste0("GCBS15_", 1:15)], 1, sd, na.rm = TRUE)

# Count missing values for each GCBS15 item
GCBS15_missing_values <- sapply(df[, paste0("GCBS15_", 1:15)], function(x) sum(is.na(x)))
print(GCBS15_missing_values)

# Range for each GCBS15 item
GCBS15_score_ranges <- sapply(df[, paste0("GCBS15_", 1:15)], function(x) range(x, na.rm = TRUE))
print(GCBS15_score_ranges)

# Overall range of scores across all GCBS15 items
GCBS15_overall_range <- range(as.matrix(df[, paste0("GCBS15_", 1:15)]), na.rm = TRUE)
print(GCBS15_overall_range)



```

```{r}
GCBS <- select(df, starts_with("GCBS_"))

modelsummary::datasummary_skim(GCBS)
```



### ANES



```{r}
# Print responses for both ANES questions
print(df[, c("ANES_1", "ANES_2")])


ANES <- select(df, starts_with("ANES_"))

modelsummary::datasummary_skim(ANES)

```




### VSA



```{r}

# Select relevant columns
VSA <- select(df, starts_with("VSA_"))

# Inspect selected data
print(head(VSA))

# Apply modelsummary
modelsummary::datasummary_skim(VSA)


```



## MOCRI



```{r}
## does this give us useful data for both the pre- and post-intervention MOCRI, or do I need to split my coding to be between the bold and nonbold (as this is how the MOCRI is split pre- and post-)?
MOCRI <- select(df, starts_with("MOCRI_"))

modelsummary::datasummary_skim(MOCRI)
```



## MIST



```{r}
dfmist
MIST <- select(df, starts_with("MIST_"))

modelsummary::datasummary_skim(MIST)


##Dom, this was my attempt at this. I realize I need to go 'earlier' with this, and split a column further back, but i'm not sure where to find that column. I know you found the MIST stuff all split by "_" but i'm just not seeing where that was
tidyr::separate(dfmist,col = "Condition", into = c("Pretest", "Posttest"),sep="_")
```




## Intervention



```{r}
df$Condition <-   ifelse(!is.na(df$Badnews_Questions_Duration), "BadNews", 
                         ifelse(!is.na(df$Tetris_Questions_Duration), "Tetris", NA))


## I don't know if below is actually that useful, it just summarises the duration of the time spent answering the follow up questions. Since the badnews and tetris follow-up questions are free text questions, i'm unsure if the way I've been treating other questionnaires still applies (because they don't have dimensions assigned to each question like e.g. the BFI)

# Summary of Badnews group
Badnews <- df %>% select(Badnews_Questions_Duration)
modelsummary::datasummary_skim(Badnews)

# Summary of Tetris group
Tetris <- df %>% select(Tetris_Questions_Duration)
modelsummary::datasummary_skim(Tetris)



  
```

